<?php

namespace app\modules\admin\models;

use app\models\Category;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "posts".
 *
 * @property int $id
 * @property int|null $category_id
 * @property string $title
 * @property string $excerpt
 * @property string $text
 * @property string|null $image
 * @property string|null $created_at
 * @property string|null $updated_at
 *
 * @property Category $category
 */
class Post extends \yii\db\ActiveRecord
{
    public $file;

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
                // если вместо метки времени UNIX используется datetime:
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'posts';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_id'], 'integer'],
            [['title', 'excerpt', 'text'], 'required'],
            [['text'], 'string'],
            [['created_at', 'updated_at'], 'safe'],
            [['title', 'excerpt', 'image'], 'string', 'max' => 255],
            [['title'], 'unique'],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => Category::class, 'targetAttribute' => ['category_id' => 'id']],

            ['file', 'image'],
        ];

    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Category',
            'title' => 'Title',
            'excerpt' => 'Excerpt',
            'text' => 'Text',
            'image' => 'Image',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'file' => 'Фото',
        ];
    }

    /**
     * Gets query for [[Category]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

//загружаем картинку и сохраняем ее название в БД
    public function beforeSave($insert)
    {
        if ($file = UploadedFile::getInstance($this, 'file')) {
            $this->deleteCurrentImage();
            $this->image = $this->createDirectory() . $this->fileName($file);
            $file->saveAs($this->image);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function beforeDelete(): bool
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

//удаляем картинку из папки при удалении поста
    private function deleteImage()
    {
        if ($this->image) {
            unlink($this->image);
        }
    }

//удаляем текущую картинку при загрузке новой
    public function deleteCurrentImage()
    {
        if (file_exists($this->image)) {
            $this->deleteImage();
        }
    }

//создаем директорию для сохранения загруженных картинок
    private function createDirectory(): string
    {
        $dir = 'images/' . date("Y-m-d") . '/';
        if (!is_dir($dir)) {
            mkdir($dir);
        }
        return $dir;
    }

//чтобы не было перезаписи при совпадении названий картинок делаем уникальное имя загружаемого файла
    private function fileName($file): string
    {

        return strtolower(uniqid() . '_' . $file->baseName . '.' . $file->extension);
    }

    public function getTag()
    {
        return $this->hasMany(Tag::class, ['id' => 'tag_id'])
            ->viaTable('posts_tags', ['post_id' => 'id']);
    }

    public function getSelectTags()
    {
       $selectTags = $this->getTag()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectTags, 'id');
    }

    public function saveTags($tags){
        $this->clearCurrentTag();
        if (is_array($tags)){
            foreach ($tags as $tag_id){
                $tag=Tag::findOne($tag_id);
                $this->link('tag', $tag);
            }

        }

    }
    public function clearCurrentTag(){
        PostTag::deleteAll(['post_id'=>$this->id]);
    }
}
